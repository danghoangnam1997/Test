name: Process Issue with Gemini and Update

on:
  issues:
    types: [opened]

jobs:
  process_and_update_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write # Required to update issue body and assignees
      contents: read # Default, good to have if script ever needed to read repo files

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Or a specific version like '3.10'

      - name: Install Python dependencies
        run: pip install google-generativeai

      - name: Run Gemini on Issue Body
        id: gemini_script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          cat << EOF > gemini_processor.py
          import os
          import google.generativeai as genai
          api_key = os.environ.get("GEMINI_API_KEY")
          issue_body_text = os.environ.get("ISSUE_BODY", "") # Default to empty string
          issue_number = os.environ.get("ISSUE_NUMBER")
          # Corrected f-string syntax here
          output_filename = f"gemini_output_issue_{issue_number}.txt"
          print(f"Processing Issue #{issue_number}")
          print(f"Output filename will be: {output_filename}")
          if not api_key:
              print("Error: GEMINI_API_KEY not found.")
              # Write empty output_file to GITHUB_OUTPUT to signal no file to process
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'output_file=', file=fh)
              exit(1) # Fail the step if API key is missing
          file_content_to_write = ""
          if not issue_body_text.strip():
              print("Warning: Issue body is empty or only whitespace.")
              file_content_to_write = "Error: Issue body was empty. No content sent to Gemini."
          else:
              try:
                  genai.configure(api_key=api_key)
                  # Using a common flash model. Adjust if needed.
                  model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")
                  
                  print(f"Sending to Gemini (first 100 chars): '{issue_body_text[:100]}'")
                  # Construct a proper prompt if needed, e.g., to summarize or rephrase
                  # For now, sending the raw body as per the script
                  prompt_for_gemini = f"Please process the following issue body:\n\n{issue_body_text}"

                  response = model.generate_content(prompt_for_gemini) # Use the constructed prompt
                  
                  if hasattr(response, 'text') and response.text is not None:
                      file_content_to_write = response.text
                  elif response.candidates and response.candidates[0].content.parts[0].text:
                       file_content_to_write = response.candidates[0].content.parts[0].text
                  else:
                      error_message = "Error: Could not extract text from Gemini response."
                      print(error_message)
                      # Log the full response for debugging if possible
                      # print("Full response:", response) # Be careful with logging sensitive data
                      file_content_to_write = error_message + "\nFull response logged to actions console if possible."
              except Exception as e:
                  print(f"Error calling Gemini API: {e}")
                  file_content_to_write = f"Error during Gemini API call: {str(e)}"
          
          print(f"Content for file (first 100 chars): {file_content_to_write[:100]}")
          with open(output_filename, "w", encoding="utf-8") as f:
              f.write(file_content_to_write)
          
          print(f"Content saved to local file: {output_filename}")
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'output_file={output_filename}', file=fh)
          EOF
          python gemini_processor.py

      - name: Read Gemini Output File Content
        id: read_gemini_output
        # Only run if the previous step succeeded and produced an output file
        if: steps.gemini_script.outputs.output_file != ''
        run: |
          output_file_name="${{ steps.gemini_script.outputs.output_file }}"
          echo "Reading content from $output_file_name"
          file_content=$(cat "$output_file_name")
          # Make the content available to subsequent steps
          # Using heredoc for multiline output: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          echo "gemini_response<<EOF" >> $GITHUB_OUTPUT
          echo "$file_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Gemini response content read and set as output."

      - name: Update Issue Body with Gemini Output
        # Only run if the gemini_script produced an output file and read_gemini_output successfully read it.
        if: steps.gemini_script.outputs.output_file != '' && steps.read_gemini_output.outputs.gemini_response != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.issue.number }};
            const new_body = `${{ steps.read_gemini_output.outputs.gemini_response }}`;

            // You could add a header or footer if you want, e.g.:
            // const final_body = `**Gemini Processed Output:**\n\n${new_body}\n\n---\n*Original issue processed by Gemini Action*`;
            const final_body = new_body; // Overwrites completely

            console.log(`Updating issue #${issue_number} with new body.`);
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: final_body
              });
              console.log("Issue body updated successfully.");
            } catch (error) {
              console.error("Failed to update issue body:", error);
              core.setFailed(`Failed to update issue body: ${error.message}`);
            }

      - name: Assign Issue
        # This step will run regardless of the Gemini processing outcome,
        # as long as the job hasn't failed before this point.
        # If you only want to assign on successful Gemini processing, add an if condition:
        # if: success() && steps.gemini_script.outputs.output_file != '' && steps.read_gemini_output.outputs.gemini_response != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.issue.number }};
            const assignee = "danghoangnam1997";

            console.log(`Assigning issue #${issue_number} to ${assignee}.`);
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                assignees: [assignee]
              });
              console.log(`Issue #${issue_number} assigned to ${assignee}.`);
            } catch (error) {
              console.error(`Failed to assign issue #${issue_number} to ${assignee}:`, error);
              // Decide if this should fail the step or just log
              // core.setFailed(`Failed to assign issue: ${error.message}`);
            }
