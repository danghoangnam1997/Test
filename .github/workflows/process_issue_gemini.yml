name: Process New Issue with Gemini

on:
  issues:
    types: [opened]
  workflow_dispatch:

jobs:
  run_gemini_on_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Ensure it's a version that supports f-strings well, 3.7+ is good

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Run Gemini on Issue Body
        id: gemini_script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          cat << EOF > gemini_processor.py
          import os
          import google.generativeai as genai

          api_key = os.environ.get("GEMINI_API_KEY")
          issue_body_text = os.environ.get("ISSUE_BODY", "") # Default to empty string
          issue_number = os.environ.get("ISSUE_NUMBER")

          # Corrected f-string syntax here
          output_filename = f"gemini_output_issue_{issue_number}.txt"

          print(f"Processing Issue #{issue_number}")
          print(f"Output filename will be: {output_filename}")
          print(f"Issue Body (first 100 chars): {issue_body_text[:100]}")

          if not api_key:
              print("Error: GEMINI_API_KEY not found.")
              # Write empty output_file to GITHUB_OUTPUT to signal no file to commit
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'output_file=', file=fh)
              exit(1)

          if not issue_body_text.strip():
              print("Warning: Issue body is empty or only whitespace.")
              with open(output_filename, "w", encoding="utf-8") as f:
                  f.write("Error: Issue body was empty. No content sent to Gemini.")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'output_file={output_filename}', file=fh)
              exit(0) # Successful exit as it's a handled scenario

          try:
              genai.configure(api_key=api_key)
              # Using "gemini-1.5-flash-latest". 
              # If "gemini-2.5-flash-preview-05-20" is a valid model you have access to, use that string instead.
              model = genai.GenerativeModel(model_name="gemini-2.5-flash-preview-05-20") 
              
              print(f"Sending to Gemini: '{issue_body_text}'")
              response = model.generate_content(issue_body_text)
              
              # Check if response has text attribute and candidates
              if hasattr(response, 'text') and response.text is not None:
                  gemini_text_output = response.text
              elif response.candidates and response.candidates[0].content.parts[0].text:
                   gemini_text_output = response.candidates[0].content.parts[0].text
              else:
                  gemini_text_output = "Error: Could not extract text from Gemini response. Full response: " + str(response)
                  print(gemini_text_output)


          except Exception as e:
              print(f"Error calling Gemini API: {e}")
              gemini_text_output = f"Error during Gemini API call: {str(e)}"
              # Create an output file with the error
              with open(output_filename, "w", encoding="utf-8") as f:
                  f.write(gemini_text_output)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'output_file={output_filename}', file=fh)
              # Decide if this API error should cause the job to fail (exit 1) or just log (exit 0)
              # Let's have it create the error file and exit successfully for now.
              exit(0) 


          print(f"Gemini Output (first 100 chars): {gemini_text_output[:100]}")

          with open(output_filename, "w", encoding="utf-8") as f:
              f.write(gemini_text_output)
          
          print(f"Output saved to {output_filename}")
          
          # Set the output filename for the next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'output_file={output_filename}', file=fh)
          EOF

          python gemini_processor.py

      - name: Commit and Push Output File
        if: steps.gemini_script.outputs.output_file != '' # Only run if output_file was set
        run: |
          output_file_to_commit="${{ steps.gemini_script.outputs.output_file }}"
          echo "Attempting to commit: $output_file_to_commit"
          
          if [ ! -f "$output_file_to_commit" ]; then
            echo "Output file '$output_file_to_commit' not found. Skipping commit."
            exit 0
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$output_file_to_commit"
          
          # Check if there are changes to commit for the specific file
          if git diff --staged --quiet -- "$output_file_to_commit"; then
            echo "No changes to commit for $output_file_to_commit."
          else
            git commit -m "Add Gemini output for Issue #${{ github.event.issue.number }} (${output_file_to_commit})"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
